{"version":3,"sources":["AppContext.js","components/PostListItem/PostListItem.js","api/api.js","api/posts.js","components/PostsList/PostsList.jsx","components/Loader/Loader.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["AppContext","React","createContext","selectedPostId","setSelectedPostId","userId","setUserId","detailsLoader","setDetailsLoader","AppProvider","children","useState","AppProps","Provider","value","PostsListItem","props","post","title","id","isClicked","setIsClicked","useContext","type","className","cn","active","onClick","defaultProps","request","url","options","fetch","then","res","ok","Error","status","json","getUserPosts","data","filter","Number","getPostComments","postId","comment","PostsList","posts","setPosts","useEffect","length","map","item","key","Loader","NewCommentForm","setComments","userName","setUserName","email","setEmail","body","setBody","onSubmit","e","preventDefault","name","method","headers","JSON","stringify","placeholder","onChange","target","PostDetails","setPost","comments","isShownComments","setIsShownComments","Promise","all","postData","commentsData","deleteComment","current","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5097626a.chunk.js","sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { useState } from 'react';\n\nexport const AppContext = React.createContext({\n  selectedPostId: 0,\n  setSelectedPostId: () => {},\n  userId: '0',\n  setUserId: () => {},\n  detailsLoader: false,\n  setDetailsLoader: () => {},\n});\n\nexport const AppProvider = ({ children }) => {\n  const [userId, setUserId] = useState('0');\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [detailsLoader, setDetailsLoader] = useState(false);\n\n  const AppProps = {\n    userId,\n    setUserId,\n    selectedPostId,\n    setSelectedPostId,\n    detailsLoader,\n    setDetailsLoader,\n  };\n\n  return <AppContext.Provider value={AppProps}>{children}</AppContext.Provider>;\n};\n","/* eslint-disable comma-dangle */\nimport React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport { AppContext } from '../../AppContext';\n\nexport const PostsListItem = (props) => {\n  const {\n    post: { title, userId, id },\n  } = props;\n  const [isClicked, setIsClicked] = useState(false);\n  const { selectedPostId, setSelectedPostId, setDetailsLoader } = useContext(\n    AppContext\n  );\n\n  const onClick = () => {\n    if (isClicked) {\n      setIsClicked(false);\n      setSelectedPostId(0);\n    } else {\n      setDetailsLoader(true);\n      setIsClicked(true);\n      setSelectedPostId(id);\n    }\n  };\n\n  return (\n    <>\n      <div>\n        <b>{`[User #${userId}]: `}</b>\n        {title}\n      </div>\n\n      <button\n        type=\"button\"\n        className={cn('PostsList__button button', {\n          active: id === selectedPostId,\n        })}\n        onClick={onClick}\n      >\n        {isClicked ? 'Close' : 'Open'}\n      </button>\n    </>\n  );\n};\n\nPostsListItem.propTypes = {\n  post: PropTypes.shape({\n    title: PropTypes.string,\n    userId: PropTypes.number,\n    id: PropTypes.number,\n  }),\n};\n\nPostsListItem.defaultProps = {\n  post: [],\n};\n","/* eslint-disable arrow-body-style */\nexport const BASE_URL = 'https://mate-api.herokuapp.com/';\n\nexport const request = (url, options) => {\n  return fetch(`${BASE_URL}${url}`, options).then((res) => {\n    if (!res.ok) {\n      throw new Error(`${res.status}`);\n    }\n\n    return res.json();\n  });\n};\n\nexport const post = (url, data) => {\n  return request(url, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json; charset=utf-8' },\n    body: JSON.stringify(data),\n  });\n};\n\nexport const patch = (url, data) => {\n  return request(url, {\n    method: 'PATCH',\n    headers: { 'Content-Type': 'application/json; charset=utf-8' },\n    body: JSON.stringify(data),\n  });\n};\n\nexport const remove = (url) => {\n  return request(url, {\n    method: 'DELETE',\n    headers: { 'Content-Type': 'application/json; charset=utf-8' },\n  });\n};\n","/* eslint-disable comma-dangle */\n/* eslint-disable function-paren-newline */\n/* eslint-disable implicit-arrow-linebreak */\n/* eslint-disable arrow-parens */\nimport { request } from './api';\n\nexport const getUserPosts = (userId) => {\n  if (userId === '0') {\n    return request(`posts`).then((res) => res.data);\n  }\n\n  return request(`posts`).then((res) =>\n    res.data.filter((post) => post.userId === Number(userId))\n  );\n};\n\nexport const getPostDetails = (postId) =>\n  request(`posts/${postId}`).then((res) => res.data);\n\nexport const getPostComments = (postId) =>\n  request(`comments`).then((res) =>\n    res.data.filter((comment) => comment.postId === postId)\n  );\n","/* eslint-disable arrow-body-style */\n/* eslint-disable comma-dangle */\n/* eslint-disable function-paren-newline */\n/* eslint-disable implicit-arrow-linebreak */\n/* eslint-disable react/jsx-indent */\n/* eslint-disable indent */\n/* eslint-disable arrow-parens */\nimport React, { useEffect, useState, useContext } from 'react';\nimport './PostsList.scss';\nimport { AppContext } from '../../AppContext';\n\nimport { PostsListItem } from '../PostListItem';\nimport { getUserPosts } from '../../api/posts';\n\nexport const PostsList = (props) => {\n  const [posts, setPosts] = useState([]);\n  const { userId } = useContext(AppContext);\n\n  useEffect(() => {\n    getUserPosts(userId).then((res) => setPosts(res));\n  }, []);\n\n  useEffect(() => {\n    getUserPosts(userId).then((res) => setPosts(res));\n  }, [userId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.length > 0\n          ? posts.map((item) => (\n              <li key={item.id} className=\"PostsList__item\">\n                <PostsListItem post={item} />\n              </li>\n            ))\n          : 'no posts'}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable arrow-parens */\nimport React, { useState, useContext } from 'react';\nimport './NewCommentForm.scss';\nimport PropTypes from 'prop-types';\nimport { post } from '../../api/api';\nimport { getPostComments } from '../../api/posts';\nimport { AppContext } from '../../AppContext';\n\nexport const NewCommentForm = ({ selectedPostId, setComments }) => {\n  const [userName, setUserName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const { setDetailsLoader } = useContext(AppContext);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if ((userName, email, body)) {\n      setDetailsLoader(true);\n      post('comments', {\n        postId: selectedPostId,\n        name: userName,\n        email,\n        body,\n      }).then(() => {\n        getPostComments(selectedPostId).then((res) => {\n          setComments(res);\n          setDetailsLoader(false);\n        });\n      });\n    }\n\n    setUserName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={onSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          value={userName}\n          className=\"NewCommentForm__input\"\n          onChange={(e) => setUserName(e.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={(e) => setEmail(e.target.value)}\n          value={email}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={(e) => setBody(e.target.value)}\n          value={body}\n        />\n      </div>\n\n      <button type=\"submit\" className=\"NewCommentForm__submit-button button\">\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n  setComments: PropTypes.func.isRequired,\n};\n","/* eslint-disable comma-dangle */\n/* eslint-disable arrow-parens */\n/* eslint-disable react/jsx-indent */\n/* eslint-disable indent */\nimport React, { useEffect, useState, useContext } from 'react';\nimport './PostDetails.scss';\nimport { Loader } from '../Loader';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails, getPostComments } from '../../api/posts';\nimport { remove } from '../../api/api';\nimport { AppContext } from '../../AppContext';\n\nexport const PostDetails = () => {\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState(null);\n  const [isShownComments, setIsShownComments] = useState(true);\n  const { selectedPostId, detailsLoader, setDetailsLoader } = useContext(\n    AppContext\n  );\n\n  useEffect(() => {\n    if (selectedPostId) {\n      Promise.all([\n        getPostDetails(selectedPostId),\n        getPostComments(selectedPostId),\n      ]).then(([postData, commentsData]) => {\n        setComments(commentsData);\n        setPost(postData);\n        setDetailsLoader(false);\n      });\n    }\n  }, [selectedPostId]);\n\n  const deleteComment = (id) => {\n    setDetailsLoader(true);\n    remove(`comments/${id}`).then(() => {\n      getPostComments(selectedPostId).then((res) => {\n        setComments(res);\n        setDetailsLoader(false);\n      });\n    });\n  };\n\n  return (\n    <>\n      {detailsLoader ? (\n        <Loader />\n      ) : (\n        <div className=\"PostDetails\">\n          {post && selectedPostId ? (\n            <>\n              <h2>Post details:</h2>\n\n              <section className=\"PostDetails__post\">\n                <p>{post.title}</p>\n              </section>\n\n              <section className=\"PostDetails__comments\">\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={() => setIsShownComments((current) => !current)}\n                >\n                  {isShownComments ? 'Hide comments' : 'Show comments'}\n                </button>\n                {isShownComments && (\n                  <ul className=\"PostDetails__list\">\n                    {comments.length > 0\n                      ? comments.map((item) => (\n                          <li className=\"PostDetails__list-item\" key={item.id}>\n                            <button\n                              type=\"button\"\n                              className=\"PostDetails__remove-button button\"\n                              onClick={() => deleteComment(item.id)}\n                            >\n                              X\n                            </button>\n                            <p>{item.body}</p>\n                          </li>\n                        ))\n                      : 'No comments'}\n                  </ul>\n                )}\n              </section>\n\n              <section>\n                <div className=\"PostDetails__form-wrapper\">\n                  <NewCommentForm\n                    selectedPostId={selectedPostId}\n                    setComments={setComments}\n                  />\n                </div>\n              </section>\n            </>\n          ) : (\n            <span className=\"select-post\">Select post</span>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n","/* eslint-disable arrow-parens */\nimport React, { useContext } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { AppContext } from './AppContext';\n\nconst App = () => {\n  const { userId, setUserId } = useContext(AppContext);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n          <select\n            className=\"App__user-selector\"\n            value={userId}\n            onChange={(e) => setUserId(e.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","/* eslint-disable comma-dangle */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { AppProvider } from './AppContext';\nimport App from './App';\n\nReactDOM.render(\n  <AppProvider>\n    <App />\n  </AppProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}